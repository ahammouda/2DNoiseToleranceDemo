%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 578.000000 578.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.5 (Build 19F101) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 578 578
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 578 578
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: CMSY10
%!FontType1-1.0: CMSY10 003.002%%CreationDate: 7/10/21% Copyright 2021 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (003.002) readonly def/FullName (CMSY10) readonly def/FamilyName (Computer Modern) readonly def/Weight (SnapShot) readonly def/ItalicAngle -14.04 def/isFixedPitch false def/UnderlinePosition -100 def/UnderlineThickness 50 defend readonly def/FontName /CMSY10 def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /O putreadonly def/FontBBox {-29 -960 1116 775} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEF1A47A414A59D766826376A440F82BB5E68A0F16B6C14278F857B5628E357FFD50CA278B15EF6824E6E98B7BBF5486A352679B0BAEDE280E86BC6893027FFF30424C646AF0B18CB268C816938F345B220432A4CAFDB1444A37BE1631D46F17162E1FDD2DC403205EAC9E392E1B2E718B37296721CCFD49855A34F4E52713A28A86C63E0085218B6A7FAB8A54E90DFF94BBD9FCF744FD77E65E6839A69517C84241EE9AC9CA4C2072055F3A799ED9E4B974C40FACA6A8DC584EE4D78CD812E8BAC2FAB725CB36FBD2BA84FABD6B6E98EB19398874B2057EF2BB9A375550D2B258C836278F285107F099E2412ACE8C0FC33B0C9893A1FA257493CB9A77AA423F3BD308261FF7C2CEDE9FF499D3C0E486B11E66219C0F90A21DA3357CCD9F29AF5D2A538D53C5C5987DB986ABC28C28E23727220348DF2316E60C19BDFF458409E5AE4B7F557275758593CBE0CCB643F7EB06937AB2E6B540E99FFB4D6E771A6B5DDF94039E631BB5C58E1F0BCECA863A8396512F6B3CBB0FE336AB7922BFAF0FA1A6D996686F600F4DD7CE9CB540CBAA9ACEBE18C4BD308D0934ECD72A64CB1F646EFC535C2F889842A7B102E99FA02E199C85C4C590C770E5E2A8705BC1CD6729061A795E0525EE9331609A2CC0F03D32D747FC6E639721B997E3A0319BA3470EC824BCBE24D1CE5841E56093BFFA6D1C85024666F54C9FC1746AF1A920B554CA84A15FC7B0BE8A7A6740D48011C8772225B284081860DB4B08568058FB23AAB2DFD3DFBA8E665EEA658A8C385B9DDA76605E7F979A9F511CC488E2833A49698BB63685B9AE8543113836E5E8DB7865FC6E71AACF17097BEE6A45749D7348D48FE68CD876FC6F71F81165F77B1D1238E7E9671A2FD80CBA597DA85EA3EDDBD214343F77B291666F7FB02D6E84CE03F7EB10F44604B191D55362D470DEE2E9F5BE0ECA15EE9349ECE5A7DB0C378102F1E344BFC5C1A1E673ADDD71D5C9D22295C619DF35C38575D946A90E8305D95BF3D756BE0C061E4547BCFF8BEE93CA5861736B098F045A8186FE4F831F9C466DEC6417549DCDC2148FA3C1D4D0EFC90DE54C056F63ED4F0A889C7D2F52D026B96D9ED67A0B3E4003B55218EEBA104D01E49E190D9ED2D7CBFA4D2A2CD03FB2B7B24C44A19029C1B5EAB7F68D80386DF2AE5D993D7EFB73E984C3DEDFF5E36CB03C05E3C24B7A5430590CC0B7F128012A7AF102DF0AD7668EF113CBDE42E5B37E367BBBC4458E7403BD324E1DEA7E03E82F5E48797BBD9C933F9CD81876340A19A0CFF11712302B39484B151761D8D8DEA3DAE38A4E511DC270BFDAE06B37156A239ABB17D7D07A754367A03767F293548C0BB134C8C220A7F827CFCEA86C566FE98AF2691DCA27002CA2A2DA3F6B4E399AD1711BBC1D2523301CBE122D07393246D775670A970DECA9FAA77DD46BD95B2F5B2396CA2F52022961A49089A8E8DE3361B9FCBB9E465489CBED0D7B2FB07CF3963A961CBACF3E5FB56BCCCF85180C6497440307EAEA9144F06D7971FB848CE1E8A6E7F5FFC95A836C92929487178D2A7F90AA544ED5FF6A4BF6F2149BBD0E5643560102910005CBDCA93456B9CE8F4FD5363726CACFFC8302DE65F5A15EDFDA5721466D1F51A42DB1F769E7075BC6AE12F7A81924300ECCC52847D0259641E3E804E12ABEFBE69E6635EFE7218E40BC8A93844F0476F0DF42CAF66D68DC31FA91B905BD6C34B8D3AF8A9637A922907B8DFAE35CDA2B2D35EB0C5D7540D32E901DEEECB3FB9F2616EB6F6AFF2E5D839E69A77DC16C04A46B7798708E14408A7613261C9C9A8C0807F7EE9B22284D0804A1BFFDAB7A962800405261D3BCDD3DF3AB99ECC46171DD4D19A875B1F4944E12A4448D4AD551A087AF779CF433DDFF266D1006243F84951172B451E8E067359A02BF0B81C752F2499CF979EA5F5CCA0C4E639925B4644BD8A9409B47B0066F8B35AA1F5142220E7A3B7456B6437126A041CD4A8C191D22E9C4960E5CC50CAA497B8147E8643F3CC509FE51A5C5F6FC1457C9268779C697C3465062E2005D806FA2D455A3C9122484EF8DFD207EA463580C7B42C0BD73DFC8ABBB1C8B7E1F6AE76C2E9542991158DB85AD5FB7480BCA6A790BA441A15C4DB25A81006268CF1502F6B8B018F13BE62BB48BE7C8283796558A55C2CC47553167DC37C81CA308737B287F718892934317CDE177E10CF04C7AFCDC5E18AB1EA93430C5C8A2F008B73D0C3FB5A6AEA07DE5132A173299B33DAE1001A0F9C14665A74A7725F7536FA18D3C1D3E1698C593B2F35C21B44C1872877BF1966E1EAEB4E3C713DE6A7D90D237655C55E23B82EF8A864A8ADD13C0F966916BBEE1EF30485098B5226ECFD3B1040DEBF61B5DB6CA9F29139549593CA9B29C1F1E0FC54E1DA7BF4E15004115C28D81F5B78B4FBFE8061FFE9EADE184E5054345D024B49976C9161179F382913FD8CD5495032886F5D0AD2284CB49A4210C45B2C70A84549AC5D26A94E3E0FAEB7C733534234CC24282044F15E8F464D8A1AF83C41A2815E4780DF7A75DB2D398DA0406C80A1B1EEDDAAD4224509CFF591833B1700ABABBD02AEA9A1509277ED14680E880871575E6BECD686A4E43DFECCCF8A11C60136B381B72472123B4CF3C6F20542DDAF34C9393BA3C9981B8FB18C30FBA8885819F0B6B9CBC005F28123EFABBED452FFDA793F2D010B57C4BE1E663CB21323123269A241241438B8FC890D6CB2212C169B7C2CA2D6834B937B991433779C44C3F571A95A9DBB63234014876A44EF67BE476846BD6EB0E9A7003E75F5974B75D5E668AFA827B1D05998601DFD08015099525462121A31DE3CA91D449ACACD8ED20F0A736CAA7F65C813CDE3DCB2B63D9E13F606C00A55F6B53D4C282A1EAFB1C8E6D2A337791360D36F92737F750FD9054145AEE6FBD2641A36E9056CEFD755F4BE028D675ED021B6137F041EA987C2780DA874797B40532EBC5FB64D99CCE7164ABE476FBC9A1F646344D4DAF086211523CBB8D4B12E21DAC206CFF9AB8AE2942AEA2B33D072C7140DB74F39303A6AFFCE33A030837F437C3E3FB89D54E41EA377DDDE0D82BF72E1228BDAACD002981C10627B79B82BAB2FB3ADAE5B7AA41EB605DC45C7004EFB0DE54849AA6DAF9DFB3826CA3951193B3864353D9EC7E8FD04483F6CDBE76BC6DD845180F5B0BD242B3867C9262DED6E3F4D7DC4B8960326CBC86BE291EE3C615A0ACE10F88B87FA6BD7830CA5CF58DD95E896708736835453486AB68204C984A179C23A7F779030B43476A1C57AE48FEBF42D20ED37F51BBA43B43A22C336293C2FC76EC74EA2CF01981055B95F0BEFD5D348AFB68A4CF59013D5A8C78F68A711FCE86E9CB37ACDB702FC1D13472E1A39A936AA1DF4DAB23E02EE19E2807D904BD8B41CC986560D7EB647BE20141C9B9B5AD278CE51FA4F1F01E7491F9EDAC9EBE90FF21DE30CC7E4E7BA0EF293557FDA8CDB290A47D9F9C5D2B0FA86202552C35B34741F3EEB5D4F9733E0C165C8C7575A8226C66E41388B1861E64E7ACA7DB1221448590DBD1BCAA00A85DB57C3F63548680A3C327ABA6AD02A499364BB2D727E8032731F4931EE58873CED004723787AB7049B26BAB6BE0C848F8182DAED499B0E4C5560616CA20CBA97C6D726F6D43384E06722F95E22727835EF9C8DAC010FEA8867D8AB20C254F2F882200FCECDC53F482F9F66DE3CE68EF55DF749993512C4C2A28EB1F03FFE82F7D7F107F68CA51641D1E4A7E87DEA54649E19DCC6C2E040CEED93374FF7403F4B331805F2369A99541B83CDBF6DC2522784AA0BC0FA059CF64AAE5FD6AE65506948D708B9E2353362939D445CA6690FBFCB90B73754FE5A0ECB8BBC33523EB13143F03C0D0A0C612CA04BDA7840CCB024F5FE91C0BC44118F7848F02C999A1F8122F4A5E50830A9A6051C3693A824A98BC4B99EEA7B0C2DE637C597A20447AB0D99334148B5EE0229404BFA081B888BFE14809DA97E2BF323F9823905B3C3FC9D08B574E3F1475EFB05C11D3EEAD7FFFDACAB548DF394A16C61CE254BDA9D5B6CA77875BDF52570D5B423E0798E228B1F2A4998B64C38EB7E84BDE33F30EBD99BFC4523B8290E9F9EAB20016858FFB176A1D43CB1A355C0AC0ED5B6301FDF1477A21A649D907B5F63C710BD3F519B7804A3D8B64AD5AE15D99A74A22ECCC0447451C660A38D943112AD26DF046EDE595E20040ED66AA70B2CCA58B3E50EEE13DF085E920933D0A9A5280838E78C92D7AF6311685D6AC36B43FCDBC2C7FB331198E7EDC6530E47C858B8CA87FEB4CBBC6D0F90777DE49DCE18929EBBF7BCF40F79C604823477D3B1B63BD22F971E62BD56DC87997BC7188FEFFE5970E7AFDFD0A3767C172D19A43D6D78B793433A527AE886242F6F3D26163098271D29D6D34C1BEC39AE0730CC9BE83A275697DA7537664EF7B6EE561533CD73D7C0844F55CD88CDCCF969BBA45302FE82F6963DFFC3A8C83AFD981B77612CD0EED660BE63C3DE3162CA0ADA0BA3238FCBE40422E5CBCA01DB90DEC61C95B0194085B077A6282F450434F58D498C6DB7CEF7C0882004ABC79FC819E0572B88A6265764DCB1561F6EDF3D8D5CEB75EA2C1BA69C32A0DA4E37038995C6CE958D381CC2A34ED3A84452797AF318C2B4F546EDABF14CEEEC39B10F065BA2FDA3CA713B12ABD9F5BB5242D5B2BE124BE73FC0E11ADAB430477220112CA02ED811398FA485B04FA9082CD75BE793F313E4FB8D70E4B0BD19E48CC025F320BE1A48BCFF39CE3183FC524239CD61517B972BA7854BD8E1DCB99DBEE4B78F0C69F97BB94337B54B24E7F4623F902F2D05401DDD420356AF209759CF0128EA63792D152A12A3C97769D22B46966EFF3EE209EE2416AA4ED57549A2E842E44D63C94EE74DD4E29325A24F32D6B5401DB4DBF221906EDF995B192648C934BE3F6BC209F02C4A12E12E3470C4335B75BB39A0D2ABDFA969ED5433B141CEFA6711B52CDC620C6C4EE8935992ED989F983072BE0B362E24D6C0233225690E2B5CCDB1B2DFC2050BEC6243C45DE3F1D04F21FAB9EA29977DED93B584B3584388743385F0A8E5CF025FA6C4EA8744D6107B85CC00716D5B8B8A108B852A1D20413C76051FFF2E29E46DE464F62F501083813EE834B9C34ACF0ABCA30DC7B11A49DC77404F76DF9EF9EF44C38C4698E746BA81E6E27E01070012E85B2AEE853D51654E9459C1F7C304880EEDA976BE47EA5178C62B4719456EA396CA4C6257015A11E2D954413F53B0F7C287D4F7954EA9B45A6CA4F08295D483E671223585605DA67F815469B958CF66A80EBECCCABD23486E76514052F2EA7F759DA276D32F0C4E100606A8261526716137D615531A1E76371004AD3825E4A2B40E41CA1C7C0F340DA96F8055A6769AE8F0AD11D19C7D0EFBFF63485AA1EED9DEEE51EA3FCCF1B26BF15BA0D663A8F41195FC03DB796C08EF6FC6813F2F4A795B2337868BE9DE2E554EB54EE2B0D54EB98EF491C2786E92BC0062A884A7A4C12EF363154D482F525A01FADBEFF45A67CA7B95CA4F9B6B5FE61B7E2CE3E7C0DE6490A2A28B2A913F9C5D8F1E93C1725DE6669BD630CD7B6BDD769A32DE36520D6398DAC52F7E9ED54F4CDB7CE9759A919C80ACAF8F68C03B296E3682DAD9BABD91F21E30B24B80884C85746F023609AE51B38367BC48A6D931650AC9B316BCFB1DBBA60AD33F0F6E8A35BF94E68CA95ADEAD68E471B55092F750DEC8F08D384F4771ED8787F7A256197ACAA53ED8EA78B899A31E21BB43A48D03D4E68B4841821AE05704F5E340244B2B97F79C753F8270B0152E9CCE9FF8C3E76B55A7EDC016D4180EB4C72CDF8EED18873C261CB6C83CDA24DD0F4925927476DED79B6A45B2F00B9887A34CECCF69994F5901579F439A562DA772B6EE37F324E891BBDF68A64047EEF5A047CF9C6006C073FE0F9B0D5F73396A2099125E03869D0778D92E33880321862DF91AF1463978912FA2BA2C17A0E549B484860D43DFAEC292498C0AA7359E231495CCF2D8244EDFA4AC9AB83E8E00EA6EC4B93EFF35AC0E0F26A3306741614E0CD6E5C90358DEA18673C9669B624E173F92728985AAF2DF55113E5A26A74A01216321F52D0609DEEC9CD713270806A4F7CA71400CFA0B01D1298CE5640FD878BC3574F5FC0FCE3DA8EBE12C04923359F46AF0093AD10C5D78D3D02C45A60137083D17A8B5D1485E886845658F43D89FC32F4324A3BBEDE1734AA75CB9EBD2BEE64C293E5B63854B9F56ED25A8226C5402BDE25BEFC8D56587DF1B1C9FBF375E8540B033BABB8162430BFEBA0DE341AC4409EDD5098A92210D1A28B6D86B478F5F79A2F7687BFDBE165A1D50F3CAA17069142932A973C42B1B67DE3CDD3FEF9A71F02F330DCAA26966F01B7F7F856EFCBC12D5DA471454AA509E14D3EE02DC60881899B864599CAF36F01EF21046274157EFEE889EB366EF4CA026A2B0FE23F52C695EBF073B5296E630ED67DD3959D988102CE57B07D7E7B70027ACCD2B15FFCCBBF60D0562FB414C2D87AFCD8371750D495AD51F50D5E32DE73969B6126E9C2883EFDD8B90F41F1C59530AD0A5F80D1F8BC6237FC927224E03A6C6664F7BC1BEA0690400DC2B51A5E78BB266921AF83C8C8EE4CDBDADFB440F9D80714C29679E5F8167E299FEC50EF493C76D33F7AB4412B13EAD7582A8789EF5584B96D566DC04A3BCBD1081D6CF027884860988698276E4024F404537516B7E9747D9F37A7D8EF2462F57C302789D0EA42FE36CB7E2A1EA1BE0C611ADD0EFB8AC6F8D47E7F790BF668B17FBA45F8B44B8B48541CA6DCE024D3EC1B176CBEA09FB1C3CBCF179E27AA7D3C3D3ED10B6F49A46F6E5AD18BEA422E24722513A6DCE06C6B44FAC8274CB8ECC172D548725A9F258673BB84BEDDDB7A191848AADF8398BC4E58FC6E6EDE2F6277ABB7C944D1DC54CAC368DC19B02BE4EF95560B76D72D9AEDDF0ADB562A148E5BA49AE63C96BF0C20E919B4AFD969F4D226E24F1BA562B85DD1588495A6B4C6A8E540ADCDA95BB304C96C2FB6551F0CC394D5F09D4ED2B144A76CF91AF364BEDC7AE554378B426ED438217E74FA2BC93FCB58570492867300D2EA62282B7ED8E48AA5DCDAAA98944B47FB9F7A0A83D411086901B432BA0674C0D922C84CC2C0749B4493B0F7802E65D1B67A9A0AD50702B5FE22AB564416915717C7CDF1009BF681C9E6F2D79C47BF4585D791E0667A370CD60D2EAC20D0DE6C5615F2063DD3D6EA71A53F45B5856A37E258C92067247783C92D91B6181E3C05A1359D79DD867FA336D2669E4D9C7B5FABE43D98ED00680AA9E1277B974B567E58E4867BD29647159D7EA082FFF4DE6D16A24BB45CD0935BF013E94D0342C3FEEFA91BCAF21F8A592741A17FF9171D036C005DB67FE1893D838F4E73AB61B3578EC1522C584EC900F53E1822C823468F45E20DFE9248883965152DF022ED55B2223FA440B391846F89804D406F39BA197215F3C4B9086BC6DC6222B0A5FE1DC19DF5607BEAD44BF7FF794657E81A483EB6823132499F26C15C2ABC26AA1A8AAE1052B60F6CE5C5393ABD13D4ACCF4C3EED39E079C571BF1F947C6C46D280729FD40119A329D22D7366637D48F0364C9A0A576E416B6F11A9B28687A409AC9918C656E55FD26450F1865B2B648FA10392EED4BF374AA6FDBC0BAAAC5E957D619BA54504F61BED1138B20725F3C990E8E56E299BFF12E442EF7E76ECA0ABEAF2B1191270D9C5876ED27F00F13B17BAC728ACDD9619DAAB347362E66CC3F2E33A27BFCD740D93E5D19FCFDEC6A6F4991C4BE147240E3BAD23F975613E532D888A6F62E5E66A31AAAAFCAE6A0B543E9A3368D282BD4F2F4B5ED8EA9143572154DD022D6B9ADD6CAF63EB6DEE5F3239E67C847769FF1040409CD3741B8D938169C83260015BFC7A9088F3E363458E50D05B2B0A8CDA0B452409C8C765E4F4CC75FA759994DFF9C76D61C8ACB19DD62AE219EF62AA5B38FA5606EB05D1EF021DA4809A8F899F9DD6093A2DCF7A0A4B9B28C18288383EBA5751F36D794A87379F282C6E3DD9C88981872406734738E9F395E2D35E33B794FD8CCF60C5257ECC1A27D79B42D51B044D48B75DF9890529F740DE386474374946177198B0E03230CA2A0FB00A08476B12433E8EE33A34A7AFBFC6C814F1B22ECD925A802769F620FAEE7D69161F5E3A1E43A2DD6B3C74477D8C86D186A3751A61DD14E1A965B28062E5862083A5ED953BCE6775CE15CA8E51B541D7895A873542B62AAB121BFAEE33A1189086002CB2A13950C669A4CF5E3A2ADE6B4BEBB706AFB3A0B1561898895627EF189977DA5DF0AFE631F2AA6FA9BD9D713EC8362AA0D9A95D113A0C307D23F32BC2718FBF2C9C256D00D9A99A6A7894784D7A833EFD6217409DF156042F127074CD0373436E6DD3365646A493C54B72559D3B0FB70B8D9F3711A1008E52BCBB6DADC0D5628E88D8B93D800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/CMSY10 cguidfix
/F1.1/CMSY10 renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 578 578 rc
0 578 m
578 578 l
578 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-148 744 m
1007 744 l
1007 -39 l
-148 -39 l
h
-148 744 m
f
50.425198 525.7323 m
532.31494 525.7323 l
532.31494 46.67717 l
50.425198 46.67717 l
h
50.425198 525.7323 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -148 744 cm
198.4252 218.26772 m
680.31494 218.26772 l
680.31494 697.32281 l
198.4252 697.32281 l
h
198.4252 218.26772 m
S
581.10236 617.95276 m
680.31494 617.95276 l
680.31494 697.32281 l
581.10236 697.32281 l
h
581.10236 617.95276 m
S
617.95276 218.26772 m
680.31494 218.26772 l
680.31494 277.79529 l
617.95276 277.79529 l
h
617.95276 218.26772 m
S
2 w
315.10953 342.99213 m
552.13904 342.99213 l
S
314.13922 342.99213 m
314.64566 566.92914 l
S
552.13904 342.99213 m
553.13904 598.11023 l
S
1 w
344.10742 598.11023 m
344.10742 697.32281 l
S
552.75592 342.99213 m
618.5697 278.14621 l
S
198.4252 218.26772 m
283.46457 218.26772 l
283.46457 308.97638 l
198.4252 308.97638 l
h
198.4252 218.26772 m
S
283.46457 308.97638 m
314.13922 342.99213 l
S
198.4252 566.92914 m
314.64566 566.92914 l
S
2 w
[
8
8
] 0 d
0.016804177 0.198351 1 sc
433.70078 167.24409 m
434.70078 742.67719 l
S
[] 0 d
0 0 0 sc
314.64566 566.92914 m
344.10742 598.11023 l
S
344.10742 598.11023 m
553.13904 598.11023 l
S
[
8
8
] 0 d
0.016804177 0.198351 1 sc
149.31889 475.30316 m
724.75195 474.30316 l
S
0 i
0 0 0 sc
CM
292.12909 274.2045 m
294.89661 271.43701 294.89661 266.95001 292.12909 264.18253 c
289.3616 261.41504 284.87463 261.41504 282.10712 264.18253 c
279.33963 266.95001 279.33963 271.43701 282.10712 274.2045 c
284.87463 276.97202 289.3616 276.97202 292.12909 274.2045 c
f
1 w
[] 0 d
0.60000002 i
1 0 0 -1 -148 744 cm
440.12909 469.7955 m
442.89661 472.56299 442.89661 477.04999 440.12909 479.81747 c
437.3616 482.58496 432.87463 482.58496 430.10712 479.81747 c
427.33963 477.04999 427.33963 472.56299 430.10712 469.7955 c
432.87463 467.02798 437.3616 467.02798 440.12909 469.7955 c
S
0 i
0 0 1 sc
CM
291.63049 53.109509 m
294.39798 50.342018 294.39798 45.85503 291.63049 43.087536 c
288.86301 40.320026 284.37601 40.320026 281.60852 43.087536 c
278.841 45.85503 278.841 50.342018 281.60852 53.109509 c
284.37601 55.877018 288.86301 55.877018 291.63049 53.109509 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -148 744 cm
439.63049 690.8905 m
442.39798 693.65796 442.39798 698.14496 439.63049 700.91248 c
436.86301 703.67999 432.37601 703.67999 429.60852 700.91248 c
426.841 698.14496 426.841 693.65796 429.60852 690.8905 c
432.37601 688.12299 436.86301 688.12299 439.63049 690.8905 c
S
0 i
0 0 1 sc
CM
290.80063 530.64124 m
293.56812 527.87378 293.56812 523.38678 290.80063 520.61926 c
288.03311 517.85175 283.54614 517.85175 280.77866 520.61926 c
278.01114 523.38678 278.01114 527.87378 280.77866 530.64124 c
283.54614 533.40875 288.03311 533.40875 290.80063 530.64124 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -148 744 cm
438.80063 213.35875 m
441.56812 216.12624 441.56812 220.61324 438.80063 223.38072 c
436.03311 226.14822 431.54614 226.14822 428.77866 223.38072 c
426.01114 220.61324 426.01114 216.12624 428.77866 213.35875 c
431.54614 210.59125 436.03311 210.59125 438.80063 213.35875 c
S
0 i
0 0 1 sc
CM
538.75238 274.63309 m
541.5199 271.8656 541.5199 267.3786 538.75238 264.61111 c
535.98486 261.84363 531.49792 261.84363 528.73041 264.61111 c
525.96289 267.3786 525.96289 271.8656 528.73041 274.63309 c
531.49792 277.4006 535.98486 277.4006 538.75238 274.63309 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -148 744 cm
686.75238 469.36691 m
689.5199 472.1344 689.5199 476.6214 686.75238 479.38889 c
683.98486 482.15637 679.49792 482.15637 676.73041 479.38889 c
673.96289 476.6214 673.96289 472.1344 676.73041 469.36691 c
679.49792 466.5994 683.98486 466.5994 686.75238 469.36691 c
S
0 i
0 0 1 sc
CM
535.90863 53.10548 m
538.67615 50.337986 538.67615 45.850998 535.90863 43.083504 c
533.14111 40.315998 528.65411 40.315998 525.88666 43.083504 c
523.11914 45.850998 523.11914 50.337986 525.88666 53.10548 c
528.65411 55.872986 533.14111 55.872986 535.90863 53.10548 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -148 744 cm
683.90863 690.89453 m
686.67615 693.66199 686.67615 698.14899 683.90863 700.9165 c
681.14111 703.68402 676.65411 703.68402 673.88666 700.9165 c
671.11914 698.14899 671.11914 693.66199 673.88666 690.89453 c
676.65411 688.12701 681.14111 688.12701 683.90863 690.89453 c
S
0 i
0 0 1 sc
CM
56.853504 53.10548 m
59.621014 50.337986 59.621014 45.850998 56.853504 43.083504 c
54.086014 40.315998 49.599026 40.315998 46.831532 43.083504 c
44.064026 45.850998 44.064026 50.337986 46.831532 53.10548 c
49.599026 55.872986 54.086014 55.872986 56.853504 53.10548 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -148 744 cm
204.8535 690.89453 m
207.62102 693.66199 207.62102 698.14899 204.8535 700.9165 c
202.08601 703.68402 197.59903 703.68402 194.83153 700.9165 c
192.06403 698.14899 192.06403 693.66199 194.83153 690.89453 c
197.59903 688.12701 202.08601 688.12701 204.8535 690.89453 c
S
0 i
0 0 1 sc
CM
56.853504 529.32593 m
59.621014 526.55847 59.621014 522.07147 56.853504 519.30396 c
54.086014 516.53644 49.599026 516.53644 46.831532 519.30396 c
44.064026 522.07147 44.064026 526.55847 46.831532 529.32593 c
49.599026 532.09344 54.086014 532.09344 56.853504 529.32593 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -148 744 cm
204.8535 214.67406 m
207.62102 217.44154 207.62102 221.92853 204.8535 224.69603 c
202.08601 227.46353 197.59903 227.46353 194.83153 224.69603 c
192.06403 221.92853 192.06403 217.44154 194.83153 214.67406 c
197.59903 211.90654 202.08601 211.90654 204.8535 214.67406 c
S
0 i
0 0 1 sc
CM
535.90863 529.32593 m
538.67615 526.55847 538.67615 522.07147 535.90863 519.30396 c
533.14111 516.53644 528.65411 516.53644 525.88666 519.30396 c
523.11914 522.07147 523.11914 526.55847 525.88666 529.32593 c
528.65411 532.09344 533.14111 532.09344 535.90863 529.32593 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -148 744 cm
683.90863 214.67406 m
686.67615 217.44154 686.67615 221.92853 683.90863 224.69603 c
681.14111 227.46353 676.65411 227.46353 673.88666 224.69603 c
671.11914 221.92853 671.11914 217.44154 673.88666 214.67406 c
676.65411 211.90654 681.14111 211.90654 683.90863 214.67406 c
S
0 i
0 0 1 sc
CM
56.8493 273.79562 m
59.616806 271.02814 59.616806 266.54114 56.8493 263.77365 c
54.081806 261.00616 49.594818 261.00616 46.827324 263.77365 c
44.059818 266.54114 44.059818 271.02814 46.827324 273.79562 c
49.594818 276.56314 54.081806 276.56314 56.8493 273.79562 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -148 744 cm
204.8493 470.20438 m
207.61681 472.97186 207.61681 477.45886 204.8493 480.22635 c
202.0818 482.99384 197.59482 482.99384 194.82733 480.22635 c
192.05981 477.45886 192.05981 472.97186 194.82733 470.20438 c
197.59482 467.43686 202.0818 467.43686 204.8493 470.20438 c
S
553.13904 598.11023 m
581.10236 617.95276 l
S
Q
0 sc
0.60000002 i
q
299.87402 279.71811 27 27.4 rc
3.5999999 0 0 3.5999999 -787.37799 -2006.2749 cm
/F1.1[ 9.9625998 0 0 9.9625998 0 0]sf
301.51999 635.31799 m
(!)s
ep
end
%%Trailer
%%EOF
